Here are the solutions to your questions:

**Q1: Divide Vector into K Non-empty Subsets with Equal Sum (Java):**

```java
public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 1, 3, 2, 2};
        int k = 2;
        boolean result = canDivideSubset(arr, k);
        System.out.println(result); // Output: true
    }

    public static boolean canDivideSubset(int[] arr, int k) {
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        if (sum % k != 0) {
            return false;
        }
        int targetSum = sum / k;
        boolean[] visited = new boolean[arr.length];
        return canDivideSubsetHelper(arr, k, 0, 0, targetSum, visited);
    }

    public static boolean canDivideSubsetHelper(int[] arr, int k, int currentIndex, int currentSum, int targetSum, boolean[] visited) {
        if (k == 0) {
            return true;
        }
        if (currentSum == targetSum) {
            return canDivideSubsetHelper(arr, k - 1, 0, 0, targetSum, visited);
        }
        for (int i = currentIndex; i < arr.length; i++) {
            if (!visited[i] && currentSum + arr[i] <= targetSum) {
                visited[i] = true;
                if (canDivideSubsetHelper(arr, k, i + 1, currentSum + arr[i], targetSum, visited)) {
                    return true;
                }
                visited[i] = false;
            }
        }
        return false;
    }
}
```

**Q2: Print All Possible Permutations of an Array (Java):**

```java
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3};
        List<List<Integer>> permutations = permute(arr);
        for (List<Integer> permutation : permutations) {
            System.out.println(permutation);
        }
    }

    public static List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        generatePermutations(nums, result, current, used);
        return result;
    }

    public static void generatePermutations(int[] nums, List<List<Integer>> result, List<Integer> current, boolean[] used) {
        if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (!used[i]) {
                current.add(nums[i]);
                used[i] = true;
                generatePermutations(nums, result, current, used);
                current.remove(current.size() - 1);
                used[i] = false;
            }
        }
    }
}
```

**Q4: Check if the Product of Subset Equals Target (Java):**

```java
public class Main {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 2, 5, 4, 1};
        int target = 16;
        boolean result = isSubsetProductEqualToTarget(array, target);
        System.out.println(result); // Output: true
    }

    public static boolean isSubsetProductEqualToTarget(int[] nums, int target) {
        int product = 1;
        for (int num : nums) {
            product *= num;
            if (product == target) {
                return true;
            }
        }
        return false;
    }
}
```

**Q5: Number of Distinct Solutions to N-Queens Puzzle (Java):**

```java
public class Main {
    public static void main(String[] args) {
        int n1 = 4;
        int n2 = 1;
        int result1 = solveNQueens(n1);
        int result2 = solveNQueens(n2);
        System.out.println(result1); // Output: 2
        System.out.println(result2); // Output: 1
    }

    public static int solveNQueens(int n) {
        int[] count = {0};
        solveNQueensHelper(n, 0, new int[n], count);
        return count[0];
    }

    public static void solveNQueensHelper(int n, int row, int[] columns, int[] count) {
        if (row == n) {
            count[0]++;
        } else {
            for (int col = 0; col < n; col++) {
                if (isValid(columns, row, col)) {
                    columns[row] = col;
                    solveNQueensHelper(n, row + 1, columns, count);
                }
            }
        }
    }

    public static boolean isValid(int[] columns, int row, int col) {
        for (int prevRow = 0; prevRow < row; prevRow++) {
            int prevCol = columns[prevRow];
            if (prevCol == col || prevCol - col == prevRow - row || prevCol - col == row - prevRow) {
                return false;
            }
        }
        return true;
    }
}
```

These Java solutions should help you with your tasks.